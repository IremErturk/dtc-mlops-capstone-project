name: Prefect Step 1 - Deploy Prefect agent to AWS ECS

on:
  workflow_dispatch:
    inputs:
      cpu:
        description: CPU for the agent
        required: true
        default: '512'
        type: choice
        options: ['256', '512', '1024', '2048', '4096']
      memory:
        description: Memory for the agent
        required: true
        default: '1024'
        type: choice
        options: ['512', '1024', '2048', '4096', '5120', '6144', '7168', '8192']

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: prefect-agent
  DOCKER_PATH: ./workflow_orchestration/
  ECS_CLUSTER: mlops-zoomcamp-capstone
  service_name: prefect-agent
  PREFECT_VERSION: 2.1.1

jobs:
  ecr-repo:
    name: Create ECR repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create new ECR repository using AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "${{ env.service_name }}-ecr"
          template: infrastructure/templates/create_ecr_repository.yml
          parameter-overrides: "RepositoryName=${{ env.service_name }}"
          no-fail-on-empty-changeset: "1"
      - name: Flow deployment finished
        run: echo "ECR repository built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  prefect-agent-ecs:
    name: ECS cluster & Prefect agent service
    runs-on: ubuntu-latest
    needs: ecr-repo
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add Prefect Cloud Secrets to SSM Parameter Store (needed for container in ECS task)
        id: aws
        run: |
          aws ssm put-parameter --type SecureString --name PREFECT_API_URL --value ${{ secrets.PREFECT_API_URL}} --overwrite
          aws ssm put-parameter --type SecureString --name PREFECT_API_KEY --value ${{ secrets.PREFECT_API_KEY}} --overwrite
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo ::set-output name=account_id::$AWS_ACCOUNT_ID

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image and push image to ECR with latest tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY $DOCKER_PATH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY

          # Tag image with the Git-Sha and Push again
          docker tag  $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Flow deployments finished
        run: echo "ECR image ${{ steps.build-image.outputs.image }} built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to ECS with AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@master
        with:
          name: ${{ env.service_name }}
          template: infrastructure/templates/ecs_cluster_prefect_agent.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >- # should match with the cloudformation parameters
            cpu=${{ github.event.inputs.cpu }},
            memory=${{ github.event.inputs.memory }},
            ServiceName=${{ env.service_name }},
            ClusterName=${{ env.ECS_CLUSTER }},
            ServiceImage=${{ steps.build-image.outputs.image }},
            AWS_Account_ID=${{steps.aws.outputs.account_id}},
            AWS_Region=${{ env.AWS_REGION }}"

      - name: ECS Service Deployment finished
        run: echo "ECS Service Deployment finished at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Generate task definition
        run: aws ecs describe-task-definition --task-definition ${{ env.service_name }} --query taskDefinition > task-definition.json

      - name: Upload task definition as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ECS task definition
          path: task-definition.json

      - name: Summary
        run: echo 'AWS ECS agent successfully deployed and ready to run your flows! :rocket:' >> $GITHUB_STEP_SUMMARY