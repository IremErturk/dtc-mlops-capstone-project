# Reference: https://github.com/anna-geller/dataflow-ops/blob/main/.github/workflows/ecs_prefect_agent.yml#L137

name: (1) Deploy Prefect agent to ECS

on:
  workflow_dispatch:
    inputs:
      cpu:
        description: CPU for the agent
        required: true
        default: '512'
        type: choice
        options: ['256', '512', '1024', '2048', '4096']
      memory:
        description: Memory for the agent
        required: true
        default: '1024'
        type: choice
        options: ['512', '1024', '2048', '4096', '5120', '6144', '7168', '8192']
      s3_path:
        description: S3 path in the format bucket/path
        required: true
        default: 'mlops-zoomcamp-capstone-artifacts/prefect-artifacts/prod'
      s3_block_name:
        description: Name of the S3 block
        required: true
        default: 'prod'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: prefect-agent
  DOCKER_PATH: ./workflow_orchestration/
  ECS_CLUSTER: mlops-zoomcamp-capstone
  PROJECT: prefect-agent
  PREFECT_VERSION: 2.1.1

jobs:
  blocks:
    name: Create blocks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Python dependencies
        run: |
          pip install prefect==$PREFECT_VERSION
          pip install s3fs

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY}}
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL}}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build S3 block
        id: s3
        run: |
          cat <<EOF > s3_block.py
          from prefect.filesystems import S3
          s3 = S3(bucket_path="${{ github.event.inputs.s3_path }}", aws_access_key_id="${{ secrets.AWS_ACCESS_KEY_ID }}", aws_secret_access_key="${{ secrets.AWS_SECRET_ACCESS_KEY }}")
          s3.save("${{ github.event.inputs.s3_block_name }}", overwrite=True)
          EOF
          python s3_block.py
      - name: Blocks creation finished
        run: echo "S3 storage block built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  list-flows:
    runs-on: ubuntu-latest
    needs: blocks
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: set-matrix
        run: echo "::set-output name=matrix::$(ls workflow_orchestration/flows/*.py | jq -R -s -c 'split("\n")[:-1]')"

  deploy:
    needs: list-flows
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flows: ${{ fromJson(needs.list-flows.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH=$PATH:$HOME/.local/bin

      - name: Python dependencies
        working-directory: workflow-orchestration
        run: |
          poetry install --no-dev

      - name: Prefect Cloud login
        run: |
          prefect config set PREFECT_API_KEY=${{ secrets.PREFECT_API_KEY}}
          prefect config set PREFECT_API_URL=${{ secrets.PREFECT_API_URL}}

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy flows to S3
        id: build
        run: |
          FLOW_NAME=$(basename ${{ matrix.flows }} .py)
          prefect deployment build ${{ matrix.flows }}:$FLOW_NAME --name cicd -q ${{ env.PROJECT }} -sb s3/prod -v $GITHUB_SHA -o $FLOW_NAME.yaml
          prefect deployment apply $FLOW_NAME.yaml
          echo ::set-output name=flow_manifest::$FLOW_NAME.yaml

      - name: Upload task definition as artifact
        uses: actions/upload-artifact@v3
        with:
          name: Deployment YAML manifests
          path: ${{ steps.build.outputs.flow_manifest }}

  ecr-repo:
    name: Create ECR repo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create new ECR repository using AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: "${{ env.PROJECT }}-ecr"
          template: infrastructure/templates/create_ecr_repository.yml
          parameter-overrides: "RepositoryName=${{ env.PROJECT }}"
          no-fail-on-empty-changeset: "1"
      - name: Flow deployment finished
        run: echo "ECR repository built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  prefect-agent-ecs:
    name: ECS cluster & Prefect agent service
    runs-on: ubuntu-latest
    # needs: ecr-repo
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add Prefect Cloud Secrets to SSM Parameter Store (needed for container in ECS task)
        id: aws
        run: |
          aws ssm put-parameter --type SecureString --name PREFECT_API_URL --value ${{ secrets.PREFECT_API_URL}} --overwrite
          aws ssm put-parameter --type SecureString --name PREFECT_API_KEY --value ${{ secrets.PREFECT_API_KEY}} --overwrite
          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          echo ::set-output name=account_id::$AWS_ACCOUNT_ID

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image and push image to ECR with latest tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY $DOCKER_PATH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY

          # Tag image with the Git-Sha and Push again
          docker tag  $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Flow deployments finished
        run: echo "ECR image ${{ steps.build-image.outputs.image }} built at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Deploy to ECS with AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.PROJECT }}
          template: infrastructure/templates/ecs_cluster_prefect_agent.yml # TODO: required infrastructure can be created with terraform directly
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "cpu=${{ github.event.inputs.cpu }},memory=${{ github.event.inputs.memory }},project=${{ env.PROJECT }},cluster=${{ env.ECS_CLUSTER }},image=${{ steps.build-image.outputs.image }},awsaccountid=${{steps.aws.outputs.account_id}},region=${{ env.AWS_REGION }}"

      - name: ECS Service Deployment finished
        run: echo "ECS Service Deployment finished at $(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_STEP_SUMMARY

      - name: Generate task definition
        run: aws ecs describe-task-definition --task-definition ${{ env.PROJECT }} --query taskDefinition > task-definition.json

      - name: Upload task definition as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ECS task definition
          path: task-definition.json

      - name: Summary
        run: echo 'AWS ECS agent successfully deployed and ready to run your flows! :rocket:' >> $GITHUB_STEP_SUMMARY